openapi: 3.0.3
info:
  title: ScrumForge API
  version: 1.0.0
  description: Documentation des endpoints de l'API ScrumForge
paths:
  /:
    get:
      operationId: root_retrieve
      description: Retourne un message de bienvenue et le nom de l'utilisateur connecté
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Home'
          description: ''
  /authentication/logout/:
    post:
      operationId: authentication_logout_create
      description: Déconnexion d'un utilisateur en blacklistant son refresh token
      tags:
      - authentication
      security:
      - jwtAuth: []
      responses:
        '205':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Logout'
          description: ''
  /authentication/reset-password/:
    post:
      operationId: authentication_reset_password_create
      description: Génération d'un nouveau mot de passe pour un utilisateur
      tags:
      - authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResetPassword'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordResponse'
          description: ''
        '404':
          content:
            application/json:
              schema:
                error: Aucun utilisateur trouvé
          description: ''
  /authentication/token/:
    post:
      operationId: authentication_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /authentication/token/refresh/:
    post:
      operationId: authentication_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /certifications/:
    get:
      operationId: certifications_list
      tags:
      - certifications
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Certification'
          description: ''
    post:
      operationId: certifications_create
      tags:
      - certifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Certification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Certification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: ''
  /certifications/{certification_id}/competencies/:
    put:
      operationId: certifications_competencies_update
      parameters:
      - in: path
        name: certification_id
        schema:
          type: integer
        required: true
      tags:
      - certifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificationCompetencyUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CertificationCompetencyUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CertificationCompetencyUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: ''
  /certifications/{id}/:
    get:
      operationId: certifications_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - certifications
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: ''
    put:
      operationId: certifications_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - certifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Certification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Certification'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: ''
    patch:
      operationId: certifications_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - certifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCertification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCertification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCertification'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certification'
          description: ''
    delete:
      operationId: certifications_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - certifications
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /certifications/competencies/:
    get:
      operationId: certifications_competencies_list
      tags:
      - certifications
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Competency'
          description: ''
    post:
      operationId: certifications_competencies_create
      tags:
      - certifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Competency'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Competency'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competency'
          description: ''
  /certifications/competencies/{id}/:
    get:
      operationId: certifications_competencies_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - certifications
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competency'
          description: ''
    put:
      operationId: competency_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - certifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Competency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Competency'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Competency'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competency'
          description: ''
    patch:
      operationId: competency_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - certifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCompetency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCompetency'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCompetency'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Competency'
          description: ''
    delete:
      operationId: certifications_competencies_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - certifications
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /dashboard/:
    get:
      operationId: dashboard_retrieve
      description: Vue du Dashboard (nécessite une authentification)
      tags:
      - dashboard
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dashboard'
          description: ''
  /user-management/register/:
    post:
      operationId: user_management_register_create
      description: |-
        Endpoint de création d'un nouvel utilisateur.
        Accessible par toute personne (non authentifiée ou admin).
      tags:
      - user-management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /user-management/users/:
    get:
      operationId: user_management_users_list
      description: |-
        Endpoint pour lister tous les utilisateurs, triés par username.
        Accessible uniquement aux administrateurs.
      tags:
      - user-management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserList'
          description: ''
  /user-management/users/{id}/:
    get:
      operationId: user_management_users_retrieve
      description: |-
        Endpoint pour obtenir le détail d'un utilisateur (username, email, last_login).
        Accessible uniquement aux administrateurs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
          description: ''
  /user-management/users/{id}/delete/:
    delete:
      operationId: user_management_users_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-management
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /user-management/users/{id}/update/:
    get:
      operationId: user_management_users_update_retrieve
      description: Endpoint permettant à un administrateur de mettre à jour un utilisateur.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdminUpdate'
          description: ''
    put:
      operationId: user_management_users_update_update
      description: Endpoint permettant à un administrateur de mettre à jour un utilisateur.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAdminUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserAdminUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserAdminUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdminUpdate'
          description: ''
    patch:
      operationId: user_management_users_update_partial_update
      description: Endpoint permettant à un administrateur de mettre à jour un utilisateur.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - user-management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserAdminUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserAdminUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserAdminUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAdminUpdate'
          description: ''
  /user-management/users/self/:
    get:
      operationId: user_management_users_self_retrieve
      description: |-
        Endpoint pour qu'un utilisateur mette à jour son propre profil.
        Accessible uniquement aux utilisateurs authentifiés.
      tags:
      - user-management
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSelfUpdate'
          description: ''
    put:
      operationId: user_management_users_self_update
      description: |-
        Endpoint pour qu'un utilisateur mette à jour son propre profil.
        Accessible uniquement aux utilisateurs authentifiés.
      tags:
      - user-management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSelfUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserSelfUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserSelfUpdate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSelfUpdate'
          description: ''
    patch:
      operationId: user_management_users_self_partial_update
      description: |-
        Endpoint pour qu'un utilisateur mette à jour son propre profil.
        Accessible uniquement aux utilisateurs authentifiés.
      tags:
      - user-management
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserSelfUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserSelfUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserSelfUpdate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSelfUpdate'
          description: ''
components:
  schemas:
    Certification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        logo:
          type: string
          format: uri
          nullable: true
        competencies:
          type: array
          items: {}
          readOnly: true
      required:
      - competencies
      - id
      - name
    CertificationCompetencyUpdate:
      type: object
      properties:
        competency_ids:
          type: array
          items:
            type: integer
          description: Liste des IDs des compétences à associer
      required:
      - competency_ids
    Competency:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
      required:
      - id
      - name
    Dashboard:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    Home:
      type: object
      properties:
        message:
          type: string
        user:
          type: string
      required:
      - message
      - user
    Logout:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    PatchedCertification:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        logo:
          type: string
          format: uri
          nullable: true
        competencies:
          type: array
          items: {}
          readOnly: true
    PatchedCompetency:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
    PatchedUserAdminUpdate:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
    PatchedUserSelfUpdate:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
    ResetPassword:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    ResetPasswordResponse:
      type: object
      properties:
        message:
          type: string
        username:
          type: string
        new_password:
          type: string
      required:
      - message
      - username
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
      required:
      - access
      - refresh
    UserAdminUpdate:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
      required:
      - email
      - username
    UserCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
      required:
      - email
      - id
      - password
      - username
    UserDetail:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        last_login:
          type: string
          format: date-time
          nullable: true
      required:
      - email
      - id
      - username
    UserList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - id
      - username
    UserSelfUpdate:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        password:
          type: string
          writeOnly: true
          minLength: 8
      required:
      - email
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
