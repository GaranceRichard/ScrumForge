import api from "./api";

// üîê Fonction de connexion (Login)
export const login = async (username, password) => {
  try {
    const response = await api.post("/authentication/token/", { username, password });

    console.log("üîç R√©ponse API:", response.data); // Debugging

    if (response.data.access) {
      localStorage.setItem("access_token", response.data.access);
      localStorage.setItem("refresh_token", response.data.refresh);
      
      console.log("‚úÖ Token stock√© :", localStorage.getItem("access_token")); // V√©rifier si le stockage fonctionne
    } else {
      throw new Error("Aucun token re√ßu");
    }

    return response.data;
  } catch (error) {
    console.error("‚ùå Erreur de connexion:", error.response ? error.response.data : error.message);
    throw error;
  }
};

// üö™ Fonction de d√©connexion (Logout)
export const logout = async () => {
  try {
    await api.post("/authentication/logout/");
  } catch (error) {
    console.error("‚ùå Erreur lors de la d√©connexion:", error);
  } finally {
    localStorage.removeItem("access_token");
    localStorage.removeItem("refresh_token");
    console.log("üö™ D√©connexion r√©ussie, tokens supprim√©s.");
    window.location.href = "/login";
  }
};

// üîç V√©rifier si l'utilisateur est authentifi√©
export const isAuthenticated = () => {
  const token = localStorage.getItem("access_token");

  console.log("üîç V√©rification Auth - Token r√©cup√©r√© :", token); // V√©rifier si le token est pr√©sent
  console.log("üîé Condition de validation :", !!token, token !== "undefined", token !== "null");


  return token && token !== "undefined" && token !== "null";
};

// üîÑ Rafra√Æchir le token (Optionnel mais utile)
export const refreshAccessToken = async () => {
  try {
    const refreshToken = localStorage.getItem("refresh_token");

    if (!refreshToken) {
      console.warn("‚ö†Ô∏è Aucun refresh token disponible.");
      return false;
    }

    const response = await api.post("/authentication/token/refresh/", {
      refresh: refreshToken,
    });

    console.log("üîÑ Nouveau token re√ßu :", response.data.access);

    localStorage.setItem("access_token", response.data.access);
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors du rafra√Æchissement du token:", error.response ? error.response.data : error.message);
    logout(); // D√©connexion automatique si le refresh √©choue
    return false;
  }
};
